import time

from telebot import types

from config import cabinets_info, bot, schedule, ADMIN_ID
from utils import send_schedule, get_schedule, send_weather, add_lesson, detect_user, check_permissions, random_element, \
    teachers_by_day
from read import define_time

days = ("–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±")


def start_greetings(message: types.Message):
    bot.send_message(ADMIN_ID, f"{detect_user(message)} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    message1 = (f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <em>208itc</em>!</b>"
                f"\n<em>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç 208 –≥—Ä—É–ø–ø—ã –§–ö–∏–°–ö–î –ë–ì–£–ö–ò</em>\n")

    message2 = (f"\n<b>‚ÑπÔ∏è–ß—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç?</b>\n"
                f"\n- <em>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</em>"
                f"\n- <em>–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã</em>"
                f"\n- <em>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</em>"
                f"\n- <em>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É —Å —É—Ç—Ä–∞</em>"
                f"\n- <em>–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ..</em>")

    photo = open(f"./bot/data/start.jpg", 'rb')

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã", callback_data="help")
    button2 = types.InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    markup.row(button1, button2)

    bot.send_photo(message.chat.id, photo, message1, parse_mode='html')
    time.sleep(1)
    bot.send_message(message.chat.id, message2, parse_mode="html", reply_markup=markup)


def manage_cabs(message: types.Message):
    args = message.text.split()[1:5]
    print(f"[=]{detect_user(message)} requested cabinets: {args}")
    args = [i[:4] for i in args if len(i) >= 3 and i[:3].isdigit()]

    if len(args) > 0:
        cabinets_info['cabinets'] = args
        cabinets_info['author'][message.message_id] = detect_user(message)

    if cabinets_info["cabinets"]:

        bot_reply = "<b>–ö–∞–±–∏–Ω–µ—Ç—ã:</b>\n" + "\n".join(cabinets_info["cabinets"])
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª", callback_data="author"))
        bot.send_message(message.chat.id, bot_reply, parse_mode="html", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "<b>–ö–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>", parse_mode="html")

    bot.delete_message(message.chat.id, message.message_id)


def reply_schedule(message: types.Message):
    args = message.text.split()[1:3]
    print(f"[=]{detect_user(message)} requested schedule: {args}")
    args.extend([''] * (2 - len(args)))
    week = list(filter(lambda x: x.isdigit(), args))
    week = int(week[0]) % 20 if week else None
    day_of_week = list(filter(lambda x: x in days, args))
    day_of_week = days.index(day_of_week[0]) if day_of_week else None

    send_schedule(week, day_of_week, message.chat.id)

    bot.delete_message(message.chat.id, message.message_id)


def show_author(callback: types.CallbackQuery):
    bot.answer_callback_query(callback.id,
                              f"–ü—Ä–∏—Å–ª–∞–ª: {cabinets_info['author'].get(callback.message.message_id - 1, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                              show_alert=True)


def scroll_schedule(callback: types.CallbackQuery):
    print(
        f"[=]{detect_user(callback)} SCROLLS THROUGH THE SCHEDULE")
    week = int(callback.message.text.split()[4])
    week = week % 20 + 1 if callback.data == "next" else week % 20 - 1

    new_text = get_schedule(schedule, week)

    if callback.message.text != new_text:
        bot.edit_message_text(new_text, callback.message.chat.id, callback.message.message_id,
                              parse_mode="html", reply_markup=callback.message.reply_markup)


def weather_request(message: types.Message):
    print(
        f"[=]{detect_user(message)} REQUESTED WEATHER")
    send_weather(message.chat.id)
    bot.delete_message(message.chat.id, message.message_id)


def add_lessons_request(message: types.Message):
    if check_permissions(message.from_user.id, 3):
        args = message.text.split()[1:]

        if args:
            add_lesson(args[0], days.index(args[1]), int(args[2]) - 1, args[3])

            bot.send_message(message.chat.id,
                             f"{detect_user(message)} –¥–æ–±–∞–≤–∏–ª(-–∞) <b><em>{args[3]}</em></b> –Ω–∞ {args[0]} –Ω–µ–¥–µ–ª—é(-–∏) –≤ <b>{define_time[int(args[2]) - 1]}</b>",
                             parse_mode="html")
    else:
        bot.set_message_reaction(message.chat.id, message.message_id, [types.ReactionTypeEmoji("üò®")])


def raw_lessons_request(message: types.Message):
    if check_permissions(message.from_user.id, 5):
        bot.send_message(message.chat.id, str(schedule))
    else:
        bot.set_message_reaction(message.chat.id, message.message_id, [types.ReactionTypeEmoji("üò®")])


def random_request(message: types.Message):
    if check_permissions(message.from_user.id, 4):
        args = message.text.split()[1:]
        if args:
            bot.send_message(message.chat.id, f"–°—Ä–µ–¥–∏ {', '.join(args)}, –±—ã–ª —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω {random_element(args)}")
        bot.delete_message(message.chat.id, message.message_id)
    else:
        bot.set_message_reaction(message.chat.id, message.message_id, [types.ReactionTypeEmoji("üò®")])


def teachers_request(message: types.Message):
    args = message.text.split()[1:2]
    if args and args[0] in days:
        bot.send_message(message.chat.id, teachers_by_day(days.index(args[0])), parse_mode="html")
    bot.delete_message(message.chat.id, message.message_id)


def get_user_id(message: types.Message):
    bot.reply_to(message, message.from_user.id)


def wrong_chat_type(message: types.Message):
    bot.reply_to(message,
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ {'–≥—Ä—É–ø–ø–µ' if message.chat.type == 'private' else '–ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏'}.")


def delete_button(callback: types.CallbackQuery):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    bot.answer_callback_query(callback.id)


def guide_button(callback: types.CallbackQuery):
    send_guide(callback.message)
    bot.answer_callback_query(callback.id)


def contacts_button(callback: types.CallbackQuery):
    send_contacts(callback.message)
    bot.answer_callback_query(callback.id)


def send_contacts(message: types.Message):
    reply = (f"üìá<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
             f"\n<u>Instagram</u>"
             f"\n- <a href='https://www.instagram.com/itinculture/'>Instagram –∫–∞—Ñ–µ–¥—Ä—ã</a>"
             f"\n- <a href='https://www.instagram.com/208itk'>Instagram –≥—Ä—É–ø–ø—ã</a>"
             f"\n\n<u>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</u>:"
             f"\n- <a href='https://t.me/naitmag'>–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞</a>")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data="hide"))
    bot.send_message(message.chat.id, reply, parse_mode='html', disable_web_page_preview=True, reply_markup=markup)


def send_guide(message: types.Message):
    reply = (f"‚öôÔ∏è<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>"
             f"\n\n<blockquote><b>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n/schedule –∏–ª–∏ /s</blockquote>"
             f"\n- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç <em>|–Ω–µ–¥–µ–ª—è| |–¥–µ–Ω—å|</em> –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ"
             f"\n- –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—é"
             f"\n- –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/schedule 12 –ø–Ω</code>"
             f"\n\n<blockquote><b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏</b>\n/cabinets –∏–ª–∏ /c –∏–ª–∏ <u>–∫–∞–±</u></blockquote>"
             f"\n- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç <em>|–∫–∞–±–∏–Ω–µ—Ç| |–∫–∞–±–∏–Ω–µ—Ç|</em>.."
             f"\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ : 4"
             f"\n- –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/cabinets 508 800–∞</code>"
             f"\n\n<blockquote><b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ</b>\n/add</blockquote>"
             f"\n- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç <em>|–ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –Ω–µ–¥–µ–ª—è| |–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏| |–Ω–æ–º–µ—Ä –ø–∞—Ä—ã| |–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞—Ä—ã|</em>.."
             f"\n- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ <em> |–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å| |—Ç–∏–ø –ø–∞—Ä—ã|</em>"
             f"\n- –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/add 2-14 —Å—Ä 4 –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è_–≥—Ä–∞—Ñ–∏–∫–∞ –ò–≤–∞–Ω–æ–≤ —Å–µ–º.</code>"
             f"\n\n<blockquote><b>–£–∑–Ω–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</b>\n/teacher –∏–ª–∏ /t</blockquote>"
             f"\n- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç <em>|–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏|</em>"
             f"\n- –ü–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/teacher —á—Ç</code>"
             f"\n\n<blockquote><b>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É</b>\n/weather –∏–ª–∏ /w</blockquote>"
             f"\n- –û—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–≥–æ–¥—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/weather</code>"
             f"\n\n<blockquote><b>–°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</b>\n/random –∏–ª–∏ /r</blockquote>"
             f"\n- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç <em>|—ç–ª–µ–º–µ–Ω—Ç1| |—ç–ª–µ–º–µ–Ω—Ç2|</em>.."
             f"\n- –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–µ—Ä–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç"
             f"\n- –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä–æ–≤"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/random @naitmag @BotFather</code>"
             f"\n\n<blockquote><b>–í–∞—à ID</b>\n/id</blockquote>"
             f"\n- –û—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—à ID –≤ Telegram"
             f"\n- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤"
             f"\n- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Ö. —á–∞—Å—Ç–∏ –±–æ—Ç–∞"
             f"\n- <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/id</code>"
             f"")

    bot.reply_to(message, reply, parse_mode="html")
