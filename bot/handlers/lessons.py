import sqlite3

from telebot import types

import config
from config import bot
from handlers.user_states import LessonsRequestState
from sql_requests import delete_lesson, create_lesson
from utils import format_schedule, get_current_week, log_info


def manage_lessons(message: types.Message):
    bot.set_state(message.from_user.id, LessonsRequestState.get_week, message.chat.id)

    log_info(message, "started adding new lesson")

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è", callback_data="current_week"),
        types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è", callback_data="next_week"),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"),
        row_width=1
    )

    with (bot.retrieve_data(message.from_user.id, message.chat.id) as data):
        data['action'] = message.text.split()[0][1:]
        data['progress'] = f"<b>{'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ' if data['action'] == 'add' else '‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ'}</b>\n"

        data['message_id'] = bot.send_message(message.chat.id, data['progress'] + "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                                              parse_mode='html',
                                              reply_markup=markup).message_id


def input_week(querry: types.Message | types.CallbackQuery):
    if isinstance(querry, types.CallbackQuery):
        week = str(get_current_week() + (1 if querry.data == "next_week" else 0))
        chat_id = querry.message.chat.id
    else:
        week = querry.text
        try:
            list(map(lambda x: int(x), week.split('-')))
        except ValueError:
            return

        chat_id = querry.chat.id
        bot.delete_message(chat_id, querry.message_id)

    with bot.retrieve_data(querry.from_user.id, chat_id) as data:
        data['week'] = week
        data['progress'] += f"üìÜ <b>{data['week']}</b> –Ω–µ–¥–µ–ª—è(-–∏)\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(

            types.InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data='0'),
            types.InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data='1'),
            types.InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data='2'),
            types.InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data='3'),
            types.InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data='4'),
            types.InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data='5'),
            row_width=2
        )

        markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"))

        bot.edit_message_text(data['progress'] + "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", chat_id, data['message_id'],
                              parse_mode='html', reply_markup=markup)

        bot.set_state(querry.from_user.id, LessonsRequestState.get_day_of_the_week, chat_id)


def input_day_of_the_week(callback: types.CallbackQuery):
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        data['day_of_the_week'] = int(callback.data)
        if data['action'] == 'add':
            data['progress'] += f"‚òÄÔ∏è {config.define_week[data['day_of_the_week']][2:]}\n"
        else:
            data['progress'] += format_schedule(int(data['week']), data['day_of_the_week'])

        markup = types.InlineKeyboardMarkup()

        markup.add(

            types.InlineKeyboardButton("8:00", callback_data='0'),
            types.InlineKeyboardButton("9:35", callback_data='1'),
            types.InlineKeyboardButton("11:10", callback_data='2'),
            types.InlineKeyboardButton("13:00", callback_data='3'),
            types.InlineKeyboardButton("14:35", callback_data='4'),
            types.InlineKeyboardButton("16.10", callback_data='5'),
            types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"),
            row_width=3
        )

        bot.edit_message_text(data['progress'] + "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", callback.message.chat.id, data['message_id'],
                              parse_mode='html', reply_markup=markup)

        bot.set_state(callback.from_user.id, LessonsRequestState.get_lesson_number, callback.message.chat.id)


def input_lesson_number(callback: types.CallbackQuery):
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        data['lesson_number'] = int(callback.data)
        data['progress'] += f"üïò <b>{config.define_time[data['lesson_number']]}</b>\n"

    markup = types.InlineKeyboardMarkup()

    markup.add(

        types.InlineKeyboardButton("–ª.", callback_data='0'),
        types.InlineKeyboardButton("—Å–µ–º.", callback_data='1'),
        types.InlineKeyboardButton("–ø—Ä.", callback_data='2'),
        types.InlineKeyboardButton("–ª–∞–±.", callback_data='3'),
        types.InlineKeyboardButton("—Å–ø–æ—Ä—Ç.", callback_data='4'),
        types.InlineKeyboardButton("–∫–∞—Ä–¥–∏–æ", callback_data='5'),
        types.InlineKeyboardButton("—Å–∏–ª.", callback_data='6'),
        types.InlineKeyboardButton("–¥–æ–ø.", callback_data='7'),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"),
        row_width=2
    )

    bot.edit_message_text(data['progress'] + "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:", callback.message.chat.id, data['message_id'],
                          parse_mode='html', reply_markup=markup)

    bot.set_state(callback.from_user.id, LessonsRequestState.get_lesson_type, callback.message.chat.id)


def input_lesson_type(callback: types.CallbackQuery):
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        data['lesson_type'] = config.define_lesson_type[int(callback.data)]
        data['progress'] += f"üîò <b>{data['lesson_type']}</b>\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"))

    bot.edit_message_text(data['progress'] + "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:", callback.message.chat.id,
                          data['message_id'],
                          parse_mode='html', reply_markup=markup)

    bot.set_state(callback.from_user.id, LessonsRequestState.get_lesson_name, callback.message.chat.id)


def input_lesson_name(message: types.Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['lesson_name'] = message.text
        data['progress'] += f"üìï <b><em>{data['lesson_name']}</em></b>\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"))

    if data['action'] == 'add':
        next_step = "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
        bot.set_state(message.from_user.id, LessonsRequestState.get_teacher, message.chat.id)
    else:
        next_step = "‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ?"
        bot.set_state(message.from_user.id, LessonsRequestState.confirm_input, message.chat.id)
        markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_lesson"))

    bot.edit_message_text(data['progress'] + next_step, message.chat.id, data['message_id'],
                          parse_mode='html', reply_markup=markup)

    bot.delete_message(message.chat.id, message.message_id)


def input_lesson_teacher(message: types.Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['teacher'] = message.text
        data['progress'] += f"üë®‚Äçüéì <b>{data['teacher']}</b>\n"

        markup = types.InlineKeyboardMarkup()

        markup.add(
            types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_lesson"),
            types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_request"),
            row_width=1
        )

        bot.edit_message_text(data['progress'] + "‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ?", message.chat.id, data['message_id'],
                              parse_mode='html', reply_markup=markup)

        bot.set_state(message.from_user.id, LessonsRequestState.confirm_input, message.chat.id)

    bot.delete_message(message.chat.id, message.message_id)


def confirm_lesson(callback: types.CallbackQuery):
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        if data['action'] == 'add':
            try:
                create_lesson(data['week'], data['day_of_the_week'], data['lesson_number'], data['lesson_name'],
                              data['lesson_type'], data['teacher'])
            except sqlite3.OperationalError:
                bot.answer_callback_query(callback.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!", show_alert=True)

            bot.edit_message_text(f"‚ÑπÔ∏è <b>–ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:</b>\n"
                                  f"üìÜ –ù–µ–¥–µ–ª—è(-–∏) <b>{data['week']}</b>\n"
                                  f"<b>{config.define_week[data['day_of_the_week']]}</b>\n"
                                  f"<b>- {config.define_time[data['lesson_number']]}</b> "
                                  f"<em>{data['lesson_type']} {data['lesson_name']}</em>",
                                  callback.message.chat.id, data['message_id'],
                                  parse_mode='html')
        else:
            result = delete_lesson(data['week'], data['day_of_the_week'], data['lesson_number'], data['lesson_type'],
                                   data['lesson_name'])
            if result:
                if len(result) == 1:
                    bot.edit_message_text(f"‚ÑπÔ∏è <b>–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:</b>\n"
                                          f"üìÜ –ù–µ–¥–µ–ª—è(-–∏) <b>{data['week']}</b>\n"
                                          f"<b>{config.define_week[data['day_of_the_week']]}</b>\n"
                                          f"<b>- {config.define_time[data['lesson_number']]}</b> "
                                          f"<em>{data['lesson_type']} {result[0][3]}</em>",
                                          callback.message.chat.id, data['message_id'],
                                          parse_mode='html')
                elif len(result) > 1:
                    bot.edit_message_text(f"‚ùå <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b>\n"
                                          f" - –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n",
                                          callback.message.chat.id, data['message_id'],
                                          parse_mode='html')
            else:
                bot.edit_message_text(f"‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>\n"
                                      f" - –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n",
                                      callback.message.chat.id, data['message_id'],
                                      parse_mode='html')
        data['progress'] = '1'
        log_info(callback, f"changed lessons: {data}")
    bot.delete_state(callback.from_user.id, callback.message.chat.id)
